{
  "name": "pd",
  "version": "0.8.1",
  "description": "an ES5 / OO utility",
  "keywords": [
    "oo",
    "oop",
    "arch",
    "utility",
    "util"
  ],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/pd.git"
  },
  "main": "lib/pd",
  "scripts": {
    "test": "make test"
  },
  "homepage": "https://github.com/Raynos/pd",
  "contributors": [
    {
      "name": "Jake Verbaten"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/pd/issues",
    "email": "raynos2@gmail.com"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/raynos/pd/raw/master/LICENSE"
    }
  ],
  "engines": {
    "node": ">=0.4"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.0.3"
  },
  "readme": "# <a href=\"#pd\" name=\"pd\">pd</a> [![Build Status][1]][2]\r\n\r\nHelping you do prototypical OO\r\n\r\n## Status: production ready\r\n\r\n## <a href=\"#Example\" name=\"Example\">Example</a>\r\n\r\n    var extend = require(\"pd\").extend\r\n\r\n    var Animal = {\r\n        legs: 4,\r\n        walk: function () { ... }\r\n    }\r\n\r\n    var Cat = extend({}, Animal, {\r\n        nyan: function () { ... },\r\n        initialize: function () { \r\n            this.lives = 9\r\n            return this;\r\n        }\r\n    });\r\n\r\n    var cat = extend({}, Cat).initialize()\r\n\r\n## <a href=\"#mov\" nane=\"mov\">Motivation</a>\r\n\r\nES5 OO is [verbose][8]\r\n\r\npd solves this with utilities and sugar.\r\n\r\n## <a name=\"blogs\" href=\"#blogs\">Blog Posts</a>\r\n\r\n - [Improving ES5 OO][9]\r\n - [Doing OO JS part 3][6]\r\n - [Doing OO JS part 2][5]\r\n - [Doing Object Oriented JavaScript][3]\r\n\r\n## <a name=\"Documentation\" href=\"#Documentation\">Documentation</a>\r\n\r\n### <a name=\"pd.extend\" href=\"#pd.extend\">pd.extend (obj..)</a>\r\n\r\npd.extend extends an object with other objects. key clashes are given right preference\r\n\r\n    pd.extend(\r\n        {\r\n            \"one\": \"faz\",\r\n            \"three\": \"bar\"\r\n        },\r\n        {\r\n            \"two\": \"ni\",\r\n            \"three\": \"baz\"\r\n        },\r\n        {\r\n            \"three\": \"bas\",\r\n            \"four\": \"four\"\r\n        }\r\n    );\r\n\r\nis the same as\r\n\r\n    {\r\n        \"one\": \"faz\",\r\n        \"two\": \"ni\",\r\n        \"three\": \"bas\",\r\n        \"four\": \"four\"\r\n    }\r\n    \r\npd.extend returns the first object you pass in.\r\n\r\n### <a name=\"pd.bindAll\" href=\"#pd.bindAll\">pd.bindAll (obj..)</a>\r\n\r\npd.bindAll is similar to underscore's bindAll method. It takes an object and binds all it's methods to the object. It takes an optional list of objects to mix in\r\n\r\n    var o = {\r\n        constructor: function () { \r\n            pd.bindAll(this, {\r\n                draw: function () { \r\n                    /* use `this` with its \"correct\" value, i.e. `o` */\r\n                }\r\n            });\r\n        },\r\n        start: function (eventEmitter) {\r\n            // note `this.draw` would not work correctly if it wasn't bound\r\n            eventEmitter.on(\"draw\", this.draw);\r\n        }\r\n    };\r\n\r\n### <a name=\"pd.Name\" href=\"#pd.Name\">pd.Name</a>\r\n\r\npd.Name constructs a Name function. This name function when passed your object will\r\nreturn a privates object. This privates object cannot be accessed in any other \r\nway then calling Name.\r\n\r\n    var Klass = (function () {\r\n        var privates = pd.Name();\r\n\r\n        return {\r\n            constructor: function (secret) {\r\n                privates(this).secret = secret;\r\n            },\r\n            getSecret: function () {\r\n                return privates(this).secret;\r\n            }\r\n        };\r\n    }());\r\n\r\n### <a name=\"pd.memoize\" href=\"#pd.memoize\">pd.memoize(fn[, context[, hasher]]</a>\r\n\r\npd.memoize caches the results of an asynchronous function. Pass in an optional\r\ncontext so the fn is called with the context and pass in an optional hasher so\r\nyou can choose how your the arguments of the returned memoized function should\r\nmap to results\r\n\r\n    var f = pd.memoize(asyncFunction),\r\n        start = Date.now()\r\n\r\n    f(10)\r\n    f(10)\r\n    f(10)\r\n\r\n    var time_taken = Date.now() - start // roughly 500\r\n    // because asyncFunction is memoized, the second and third call return\r\n    // at the same time as the first, and any call after that returns\r\n    // immediately\r\n\r\n    function asyncFunction(key, callback) {\r\n        setTimeout(function () {\r\n            callback(key * 2)\r\n        }, 500)\r\n    }\r\n\r\n## Installation\r\n\r\n`npm install pd`\r\n\r\n## Test\r\n\r\n`make test`\r\n\r\n## Contributors\r\n\r\n - Raynos\r\n - Gozala\r\n\r\n## MIT Licenced\r\n\r\n  [1]: https://secure.travis-ci.org/Raynos/pd.png\r\n  [2]: http://travis-ci.org/Raynos/pd\r\n  [3]: http://raynos.org/blog/4/Doing-Object-Oriented-JavaScript\r\n  [4]: http://www.2ality.com/2011/06/prototypes-as-classes.html\r\n  [5]: http://raynos.org/blog/5/Doing-Object-Oriented-Javascript---part-2\r\n  [6]: http://raynos.org/blog/7/Doing-Object-Oriented-Javascript---part-3\r\n  [8]: https://gist.github.com/1384024\r\n  [9]: http://raynos.org/blog/17/Improving-ES5-OO-with-pd",
  "_id": "pd@0.8.1",
  "dist": {
    "shasum": "be11fe65f8c71e2477ebfcafca86e38b1608afb5"
  },
  "_from": "pd@0.8.1"
}
