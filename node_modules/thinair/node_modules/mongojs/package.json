{
  "name": "mongojs",
  "description": "a simple mongo module that implements the mongo api",
  "keywords": [
    "mongo",
    "db",
    "mongodb"
  ],
  "version": "0.3.2",
  "homepage": "https://github.com/gett/mongojs",
  "author": {
    "name": "Ge.tt",
    "email": "hello@ge.tt"
  },
  "contributors": [
    {
      "name": "Mathias Buus Madsen",
      "email": "m@ge.tt"
    },
    {
      "name": "Ian Jorgensen",
      "email": "i@ge.tt"
    }
  ],
  "main": "./index.js",
  "dependencies": {
    "common": ">=0.1.0",
    "mongodb": ">=0.9.6"
  },
  "readme": "# mongojs\nA [node.js](http://nodejs.org) module for mongodb, that emulates the mongodb API as much as possible. It wraps [mongodb-native](https://github.com/christkv/node-mongodb-native/).  \nIt is available through npm:\n\n\tnpm install mongojs\n\nmongojs is very simple to use:\n\n``` js\nvar db = require('mongojs').connect(databaseURL, [collections]);\n```\n\nSome examples of this could be:\n\n``` js\n// simple usage for a local db\nvar db = require('mongojs').connect('mydb', ['mycollection']);\n\n// the db is on a remote server (the port default to mongo)\nvar db = require('mongojs').connect('example.com/mydb', ['mycollection']);\n\n// we can also provide some credentials\nvar db = require('mongojs').connect('username:password@example.com/mydb', ['mycollection']);\n\n// connect now, and worry about collections later\nvar db = require('mongojs').connect('mydb');\nvar mycollection = db.collection('mycollection');\n```\n\nAfter we connected we can query or update the database just how we would using the mongo API with the exception that we use a callback  \nThe format for callbacks is always `callback(error, value)` where error is null if no exception has occured.\n\n``` js\n// find everything\ndb.mycollection.find(function(err, docs) {\n\t// docs is an array of all the documents in mycollection\n});\n\n// find everything, but sort by name\ndb.mycollection.find().sort({name:1}, function(err, docs) {\n\t// docs is now a sorted array\n});\n\n// iterate over all whose level is greater than 90.\ndb.mycollection.find({level:{$gt:90}}).forEach(function(err, doc) {\n\tif (!doc) {\n\t\t// we visited all docs in the collection\n\t\treturn;\n\t}\n\t// doc is a document in the collection\n});\n\n// find all named 'mathias' and increment their level\ndb.mycollection.update({name:'mathias'}, {$inc:{level:1}}, {multi:true}, function(err) {\n\t// the update is complete\n});\n\n// use the save function to just save a document (the callback is optional for all writes)\ndb.mycollection.save({created:'just now'});\n```\n\nFor more detailed information about the different usages of update and quering see [the mongo docs](http://www.mongodb.org/display/DOCS/Manual)\n",
  "_id": "mongojs@0.3.2",
  "dist": {
    "shasum": "42ce7a840378dc8b5c279583c7142c9ac63731f7"
  },
  "_from": "mongojs@0.3.2"
}
